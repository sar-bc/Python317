index.html
! -> Tab
lorem

align = left | center | right | justify
Shift + Alt + стрелка вниз - создание дубликата

	h1
h2
		h3
	h4
		h5
h6

<!-- --> 
/*  */
Сtrl + /

H20

open in browser

https://validator.w3.org/

Ctrl + H
align="
style="text-align:


style.html

file:///D:/Python317/HTML/inform.html

file:///D:/Python317/HTML/%D0%9F%D0%B5%D1%80%D0%B2%D1%8B%D0%B9%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82.html


#FF0000  -> F00

0-9A-F

rgb(255, 0, 0)
<span></span>

https://fonts.google.com/

list.html

Shift + Alt + F

style.css


Растровые изображения:
*.jpg (jpeg)
*.png
*.gif

Векторые изображения:
*.svg

file:///D:/Python317/HTML/form/file.php?name=%D0%9E%D0%BB%D1%8C%D0%B3%D0%B0&psw=fgdfgdfg&pol=on

file:///D:/Python317/HTML/form/form.html?name=Olga&psw=123456&pol=on#file.php
file:///D:/Python317/HTML/form/form.html#file.php
file:///D:/Python317/HTML/form/form.html#file.php?page=2
file:///D:/Python317/HTML/form/form.html?name=figma&psw=789456&pol=on#file.php
file:///D:/Python317/HTML/form/form.html?name=Olga&psw=123456&pol=on&x=52&y=55#file.php

win + R => cmd
python
py

terminal
1.py

print("Hello, World!")

1.py
python 1.py
py 1.py

IDLE

import keyword
keyword.kwlist


0 - 9
1 - 99

ворона: 
1, 21, 31, 41, 51, ... 91

вороны: 
2 , 22, 92
3
4

ворон: 
5 6 7 8 9 0


import math
import math as m
from math import *

from math import ceil, floor

1,000,000.23



git --version
git --help

git init 
- создание нового репозитория (один раз для одного репозитория)

git status
- просмотр состояния репозитория

git add -A
	-A, --all - все файлы, которые находятся в папке и всех подпапках
	main.py - один файл 
	. - все файлы из текущей директории
- отслеживание изменения файлов

git config --global user.name "new user"
		   --local

git config --global user.email "test@mail.ru"

git commit -m "first commit"
- создание контрольной точки состояния репозитория

.gitignore

git add .
git commit -m "added gitignore"

Ветки

git branch
- просмотр веток

git branch test
- создаем ветку

git branch -D test
- удаление ветки

git branch readme

git checkout readme
- перейти на ветку

readme.md


master       readme  
main.py  ->   main.py
		<-	  readme.md
			  
git merge readme
- слияние веток

git log
- история коммитов

токен

win + R => control
(Панель управления)

Диспечер учетных данных
Учетные данные Windows
Общие учетные данные -> Добавить
https://github.com


git remote add origin https://github.com/Helen-prog/Python317.git
git push -u origin master

75d6a172128ea34beeeb00a21b1a82b736b3ab58

0) git status
1) git add .
2) git commit -m "added print"
3) git push
- с локального репозитория переносит файлы на удаленный репозиторий

git clone https://github.com/Helen-prog/Python317.git
- клонирование репозитория

git pull
- забирает измения с удаленного репозитория в локальный


class Name:
	свойства (поля, переменные)
		- статические
		- динамические
	методы (функции)
		- статические - def method()  @staticmethod
		- класса - def method(cls)  @classmethod
		- экземпляра - def method(self)
	
	атрибуты = свойства + методы
	

Модифмкаторы доступа:
public - self.name
protected - self._name
private - self.__name

DRY (Don`t Repeat Youself) - не повторяйся

Родительский класс (суперкласс, базовый)
Дочерний класс (класс наследник, подкласс)

Перегрузка методов


group = [
 Student("Батодалаев", "Даши", 16, "ГК", "Web_011", 5),
 Student("Загидуллин", "Линар", 32, "РПО", "PD_011", 5),
 Graduate("Шугани", "Сергей", 15, "РПО", "PD_011", 5, "Защита
персональных данных"),
 Teacher("Даньшин", "Андрей", 38, "Астрофизика", 110),
 Student("Маркин", "Даниил", 17, "ГК", "Python_011", 5),
 Teacher("Башкиров", "Алексей", 45, "Разработка приложений", 20)
]
for i in group:
 i.info()
 
geometry -> pip
	__init__.py
	rect.py 
	sq.py
	trian.py
	
import sys
sys.path
 
car
	__init__.py
	carclass.py
	electrocar.py
	
 
dump() - сохраняет данные в открытый файл
load() - получаем данные из файла

dumps() - сохраняет данные в строку
loads() - получаем данные из строки


{
  "num1": {
    "name": "afecaab",
    "tel": "9365924280"
  },
  "num2": {
    "name": "fbdafab",
    "tel": "4002877928"
  },
  "num3": {
    "name": "aedabaf",
    "tel": "4072151818"
  }
}

{
	"ГК Web":
		{
			'Nikolaenko': [2, 3, 5, 4, 2], 
			'Bodnya': [5, 4, 3, 4, 5, 3]
		},
	"ГК Python":
		{
			'Birukov': [3, 5, 3, 2, 5, 4]
		}
}


pip install requests



Сохранить в файл JSON, данные пользователей, которые выполнили максимальное количество задач (TODO)


csv (comma separated values) - переменные разделенные запятыми

data.csv

Имя,Профессия,Год рождения
Виктор,Веб-дизайнер,1995
Игорь,Программист,1983

Имя;Профессия;Год рождения
Виктор;Веб-дизайнер;1995
Игорь;Программист;1983


csv.reader() - []
csv.DictReader() - {}

csv.writer() - []
csv.DictWriter() - {}

pip install beautifulsoup4  или  bs4


pip install lxml

https://ru.wordpress.org/plugins/browse/blocks/page/1/
https://ru.wordpress.org/plugins/browse/blocks/page/2/
https://ru.wordpress.org/plugins/browse/blocks/page/3/

https://ru.wordpress.org/plugins/browse/blocks/page/24/


articles
	project_articles.py
	controller.py
	view.py
	model.py


127.0.0.1:5000

view.py
templates
	index.html
	blog.html
	
http://127.0.0.1:5000/

*.db, *.sqlite, *.db3, *.sqlite3

SELECT [ALL | DISTINCT] {* | столбец_1 [, столбец_N]}
FROM таблица_1 [, таблица_N]
WHERE условие
	=, ==, !=, <>, <, <=, >, >=
	AND, OR
	IS - является (=)
	[NOT] BETWEEN начальное_значение AND конечное_значение
	[NOT] LIKE шаблон_строки:
		% - любое кол-во символов
		_ - один любой символ
	IS [NOT] NULL	
	[NOT] GLOB регулярные_выражения:
		* - любое кол-во символов
		? - элемент может быть, может не быть
		. - один любой символ
		[символы] - соответствует одному из заданных символов
		[начальное_значение-конечное_значение] - одно из значений заданного диапазона
		[^...] - все кроме заданных символов [^0-9]
	[NOT] IN (набор_значений | выражение)
	EXISTS (существует)
GROUP BY (группировать по)
HAVING (условие)
ORDER BY название_столбца | номер_столбца [ASC | DESC]
LIMIT количество_строк OFFSET смещение
	LIMIT [смещение,] количество_строк

		
	
INSERT - добавление новой строки в БД
UPDATE - изменение строки в существующей БД
DELETE - удаление строки из БД
		
		
INSERT INTO имя_таблицы [(название_столбцов)]
VALUES (набор_значений)


INSERT INTO имя_таблицы [(название_столбцов)]
SELECT список_столбцов
FROM имя_таблицы
WHERE уловие	

UPDATE имя_таблицы
SET столбец_1=значение_1, столбец_N = значение_N
WHERE условие


DELETE FROM имя_таблицы
WHERE удаление


Логическая БД
Физическая БД

Декартовое произведение - все возможные комбинации каждой строки одной таблицы с каждой строкой другой таблицы

Функции агрегирования
SUM  (только с числами)
AVG  (только с числами)
COUNT
MIN
MAX

Подзапросы (вложенные запросы)
- однострочный (>, <, =, <>, !=, <=, <=)
- многострочный IN (NOT IN)


UNION, UNION ALL

SELECT столбцы
FROM имя_таблицы_1 [INNER] JOIN имя_таблицы_2
ON условия (связь_ключей)


Шаблонизатор (Jinja)

pip install jinja2

{{ название переменной }}
{% блок кода %}

{% for <выражение> %}

{% endfor %}



{% if <условие> %}

{% elif <условие> %}

{% else %}

{% endif %}


<<<<<<< HEAD
https://disk.yandex.ru/d/lKEYZLQk8uI8qA
=======
https://disk.yandex.ru/d/lKEYZLQk8uI8qA
>>>>>>> afa7c6687f357d04c2e94cb9f8f92c3353943b80
